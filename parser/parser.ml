type token =
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | LBRACE
  | RBRACE
  | MINUS
  | PLUS
  | BANG
  | TILDE
  | HELP
  | COLON
  | MULT
  | DIV
  | EXP
  | MODULUS
  | INTDIV
  | MATRIXMULT
  | OUTERPROD
  | KRONECKERPROD
  | MATCH
  | LT
  | GT
  | EQEQ
  | NEQ
  | GE
  | LE
  | ANDVEC
  | ANDNOVEC
  | ORVEC
  | ORNOVEC
  | LASSIGN
  | RASSIGN
  | LISTSUBSET
  | SEMICOLON
  | COLONEQ
  | DOT3
  | COLON2
  | COLON3
  | ATTRIBUTE
  | LSUPASSIGN
  | RSUPASSIGN
  | EQASSIGN
  | FUNCTION
  | RETURN
  | IF
  | FOR
  | WHILE
  | REPEAT
  | NEXT
  | BREAK
  | NULL
  | NA
  | INFINITY
  | NAN
  | TRUE
  | FALSE
  | IDENT of (string)
  | USEROP of (string)
  | STRING of (string)
  | INT of (int)
  | FLOAT of (float)
  | COMPLEX of (float)
  | COMMA
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
module A = RAst
# 73 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACKET *);
  260 (* RBRACKET *);
  261 (* LBRACE *);
  262 (* RBRACE *);
  263 (* MINUS *);
  264 (* PLUS *);
  265 (* BANG *);
  266 (* TILDE *);
  267 (* HELP *);
  268 (* COLON *);
  269 (* MULT *);
  270 (* DIV *);
  271 (* EXP *);
  272 (* MODULUS *);
  273 (* INTDIV *);
  274 (* MATRIXMULT *);
  275 (* OUTERPROD *);
  276 (* KRONECKERPROD *);
  277 (* MATCH *);
  278 (* LT *);
  279 (* GT *);
  280 (* EQEQ *);
  281 (* NEQ *);
  282 (* GE *);
  283 (* LE *);
  284 (* ANDVEC *);
  285 (* ANDNOVEC *);
  286 (* ORVEC *);
  287 (* ORNOVEC *);
  288 (* LASSIGN *);
  289 (* RASSIGN *);
  290 (* LISTSUBSET *);
  291 (* SEMICOLON *);
  292 (* COLONEQ *);
  293 (* DOT3 *);
  294 (* COLON2 *);
  295 (* COLON3 *);
  296 (* ATTRIBUTE *);
  297 (* LSUPASSIGN *);
  298 (* RSUPASSIGN *);
  299 (* EQASSIGN *);
  300 (* FUNCTION *);
  301 (* RETURN *);
  302 (* IF *);
  303 (* FOR *);
  304 (* WHILE *);
  305 (* REPEAT *);
  306 (* NEXT *);
  307 (* BREAK *);
  308 (* NULL *);
  309 (* NA *);
  310 (* INFINITY *);
  311 (* NAN *);
  312 (* TRUE *);
  313 (* FALSE *);
  320 (* COMMA *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  314 (* IDENT *);
  315 (* USEROP *);
  316 (* STRING *);
  317 (* INT *);
  318 (* FLOAT *);
  319 (* COMPLEX *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\005\000\005\000\006\000\006\000\007\000\007\000\
\007\000\008\000\008\000\009\000\009\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\010\000\010\000\011\000\
\011\000\001\000\000\000"

let yylen = "\002\000\
\001\000\003\000\003\000\001\000\002\000\003\000\002\000\003\000\
\002\000\003\000\002\000\003\000\000\000\002\000\001\000\001\000\
\003\000\002\000\003\000\000\000\002\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\004\000\006\000\003\000\
\002\000\002\000\002\000\002\000\003\000\004\000\004\000\003\000\
\002\000\001\000\001\000\004\000\004\000\002\000\003\000\000\000\
\002\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\066\000\067\000\028\000\029\000\026\000\027\000\
\000\000\023\000\024\000\025\000\075\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\000\003\000\000\000\000\000\000\000\015\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\056\000\053\000\
\050\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\000\068\000\000\000\021\000\069\000\000\000\
\000\000\054\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\012\000\000\000\019\000\055\000\000\000"

let yydgoto = "\002\000\
\021\000\022\000\076\000\077\000\115\000\078\000\079\000\118\000\
\080\000\000\000\000\000"

let yysindex = "\031\000\
\188\005\000\000\188\005\188\005\188\005\188\005\188\005\235\254\
\188\005\188\005\000\000\000\000\000\000\000\000\000\000\000\000\
\248\254\000\000\000\000\000\000\000\000\047\255\204\255\204\255\
\204\255\204\255\204\255\074\005\188\005\074\005\204\255\001\255\
\031\255\188\005\188\005\188\005\131\005\102\005\188\005\188\005\
\188\005\188\005\188\005\188\005\188\005\188\005\188\005\188\005\
\188\005\188\005\188\005\188\005\188\005\188\005\188\005\188\005\
\235\254\034\255\035\255\235\254\188\005\188\005\188\005\074\005\
\074\005\204\255\000\000\000\000\204\255\204\255\204\255\000\000\
\027\255\028\255\043\255\010\255\204\255\092\255\032\255\093\255\
\162\005\044\255\094\255\204\255\204\255\204\255\204\255\204\255\
\204\255\204\255\204\255\204\255\204\255\204\255\204\255\204\255\
\204\255\204\255\204\255\204\255\204\255\000\000\000\000\000\000\
\000\000\204\255\204\255\204\255\204\255\204\255\188\005\188\005\
\188\005\162\005\000\000\000\000\255\254\000\000\000\000\095\255\
\188\005\000\000\204\255\204\255\204\255\010\255\058\255\032\255\
\098\255\204\255\000\000\188\005\000\000\000\000\204\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\065\000\097\000\091\000\
\154\000\173\000\236\000\000\000\000\000\000\000\255\000\000\000\
\000\000\000\000\000\000\000\000\101\255\100\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\100\000\
\000\000\070\001\000\000\000\000\094\001\157\001\176\001\000\000\
\168\255\039\005\000\000\000\000\008\255\000\000\000\000\000\000\
\100\255\125\255\000\000\239\001\002\002\065\002\084\002\148\002\
\167\002\230\002\249\002\056\003\075\003\138\003\158\003\221\003\
\240\003\047\004\066\004\129\004\148\004\000\000\000\000\000\000\
\000\000\239\001\002\002\065\002\212\004\231\004\009\255\041\255\
\012\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\255\000\000\016\255\042\255\017\255\054\255\005\255\105\255\
\000\000\020\255\000\000\000\000\000\000\000\000\021\255"

let yygindex = "\000\000\
\000\000\018\000\250\255\255\255\239\255\243\255\252\255\242\255\
\000\000\000\000\000\000"

let yytablesize = 1787
let yytable = "\023\000\
\001\000\024\000\025\000\026\000\027\000\028\000\016\000\030\000\
\031\000\004\000\009\000\004\000\009\000\007\000\005\000\007\000\
\005\000\010\000\008\000\010\000\008\000\006\000\017\000\006\000\
\083\000\029\000\064\000\065\000\066\000\032\000\033\000\001\000\
\069\000\070\000\071\000\072\000\017\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\011\000\
\127\000\011\000\067\000\106\000\107\000\108\000\109\000\110\000\
\022\000\032\000\033\000\120\000\016\000\111\000\112\000\004\000\
\009\000\114\000\102\000\007\000\005\000\105\000\034\000\010\000\
\008\000\032\000\033\000\006\000\017\000\113\000\121\000\035\000\
\068\000\036\000\057\000\103\000\104\000\116\000\119\000\117\000\
\074\000\122\000\129\000\061\000\132\000\134\000\013\000\013\000\
\005\000\006\000\018\000\126\000\131\000\123\000\124\000\125\000\
\128\000\133\000\000\000\000\000\000\000\000\000\000\000\130\000\
\000\000\000\000\000\000\000\000\000\000\001\000\001\000\001\000\
\001\000\000\000\135\000\001\000\001\000\000\000\001\000\001\000\
\000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\000\000\001\000\001\000\001\000\001\000\001\000\001\000\
\000\000\058\000\000\000\000\000\001\000\001\000\001\000\000\000\
\000\000\000\000\000\000\000\000\001\000\001\000\000\000\000\000\
\028\000\028\000\028\000\028\000\059\000\000\000\028\000\028\000\
\000\000\028\000\028\000\000\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\001\000\028\000\028\000\028\000\
\028\000\028\000\028\000\000\000\000\000\000\000\000\000\000\000\
\028\000\028\000\000\000\000\000\037\000\000\000\038\000\028\000\
\028\000\000\000\039\000\040\000\000\000\041\000\042\000\000\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\000\000\051\000\052\000\053\000\054\000\055\000\056\000\028\000\
\000\000\000\000\000\000\060\000\057\000\058\000\000\000\000\000\
\000\000\000\000\000\000\059\000\060\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\065\000\000\000\
\000\000\001\000\001\000\001\000\001\000\000\000\000\000\001\000\
\001\000\001\000\001\000\001\000\000\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\000\000\001\000\001\000\
\001\000\001\000\001\000\001\000\000\000\000\000\000\000\000\000\
\001\000\001\000\001\000\000\000\000\000\000\000\000\000\000\000\
\001\000\001\000\000\000\001\000\000\000\000\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\000\000\000\000\
\001\000\001\000\001\000\000\000\000\000\001\000\001\000\001\000\
\001\000\022\000\022\000\022\000\022\000\064\000\000\000\022\000\
\022\000\022\000\022\000\022\000\000\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\000\000\022\000\022\000\
\022\000\022\000\022\000\022\000\057\000\047\000\057\000\000\000\
\000\000\022\000\022\000\057\000\000\000\061\000\000\000\061\000\
\022\000\000\000\000\000\000\000\000\000\000\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\000\000\000\000\
\022\000\022\000\022\000\000\000\000\000\022\000\022\000\022\000\
\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\000\000\000\000\057\000\057\000\057\000\000\000\000\000\057\000\
\057\000\057\000\057\000\058\000\049\000\058\000\000\000\000\000\
\000\000\000\000\058\000\061\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\059\000\046\000\
\059\000\000\000\000\000\000\000\000\000\059\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\000\000\
\000\000\058\000\058\000\058\000\000\000\000\000\058\000\058\000\
\058\000\058\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\000\000\000\000\059\000\059\000\059\000\000\000\
\000\000\059\000\059\000\059\000\059\000\060\000\031\000\060\000\
\000\000\000\000\000\000\000\000\060\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\065\000\030\000\065\000\000\000\000\000\000\000\000\000\065\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\000\000\000\000\060\000\060\000\060\000\000\000\000\000\
\060\000\060\000\060\000\060\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\000\000\000\000\065\000\065\000\
\065\000\000\000\000\000\065\000\065\000\065\000\065\000\000\000\
\051\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\
\000\000\064\000\000\000\000\000\000\000\000\000\064\000\000\000\
\000\000\000\000\000\000\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\047\000\
\000\000\047\000\000\000\000\000\000\000\000\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\064\000\064\000\064\000\064\000\064\000\
\064\000\064\000\064\000\000\000\000\000\064\000\064\000\064\000\
\000\000\000\000\064\000\064\000\064\000\064\000\000\000\000\000\
\000\000\000\000\000\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\032\000\000\000\047\000\047\000\047\000\
\000\000\000\000\047\000\047\000\047\000\047\000\049\000\000\000\
\049\000\000\000\000\000\000\000\000\000\049\000\033\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\046\000\000\000\046\000\000\000\000\000\000\000\000\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\000\000\000\000\049\000\049\000\049\000\000\000\
\000\000\049\000\049\000\049\000\049\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\034\000\000\000\046\000\
\046\000\046\000\000\000\000\000\046\000\046\000\046\000\046\000\
\031\000\000\000\031\000\000\000\000\000\000\000\000\000\031\000\
\041\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\030\000\000\000\030\000\000\000\000\000\
\000\000\000\000\030\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\000\000\000\000\031\000\031\000\
\031\000\000\000\000\000\031\000\031\000\031\000\031\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\042\000\
\000\000\030\000\030\000\030\000\000\000\000\000\030\000\030\000\
\030\000\030\000\051\000\000\000\051\000\000\000\000\000\000\000\
\000\000\051\000\043\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\052\000\000\000\052\000\
\000\000\000\000\000\000\000\000\052\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\000\000\000\000\
\051\000\051\000\051\000\000\000\000\000\051\000\051\000\051\000\
\051\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\044\000\000\000\052\000\052\000\052\000\000\000\000\000\
\052\000\052\000\052\000\052\000\000\000\032\000\000\000\032\000\
\000\000\000\000\000\000\000\000\032\000\045\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\000\000\033\000\000\000\000\000\000\000\000\000\033\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\000\000\000\000\032\000\032\000\032\000\000\000\000\000\
\032\000\032\000\032\000\032\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\037\000\000\000\033\000\033\000\
\033\000\000\000\000\000\033\000\033\000\033\000\033\000\034\000\
\000\000\034\000\000\000\000\000\000\000\000\000\034\000\035\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\000\000\041\000\000\000\000\000\000\000\
\000\000\041\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\000\000\000\000\034\000\034\000\034\000\
\000\000\000\000\034\000\034\000\034\000\034\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\039\000\000\000\
\041\000\041\000\041\000\000\000\000\000\041\000\041\000\041\000\
\041\000\042\000\000\000\042\000\000\000\000\000\000\000\000\000\
\042\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\000\000\000\043\000\000\000\
\000\000\000\000\000\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\000\000\000\000\042\000\
\042\000\042\000\000\000\000\000\042\000\042\000\042\000\042\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\036\000\000\000\043\000\043\000\043\000\000\000\000\000\043\000\
\043\000\043\000\043\000\044\000\000\000\044\000\000\000\000\000\
\000\000\000\000\044\000\038\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\000\000\045\000\000\000\000\000\000\000\000\000\045\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\000\000\
\000\000\044\000\044\000\044\000\000\000\000\000\044\000\044\000\
\044\000\044\000\000\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\062\000\000\000\045\000\045\000\045\000\
\000\000\000\000\045\000\045\000\045\000\045\000\037\000\000\000\
\037\000\000\000\000\000\000\000\000\000\037\000\063\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\035\000\000\000\035\000\000\000\000\000\000\000\000\000\
\035\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\000\000\000\000\037\000\037\000\037\000\000\000\
\000\000\037\000\037\000\037\000\037\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\000\000\000\000\035\000\
\035\000\035\000\000\000\000\000\035\000\035\000\035\000\035\000\
\039\000\000\000\039\000\000\000\000\000\000\000\000\000\039\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\040\000\000\000\040\000\000\000\000\000\
\000\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\000\000\000\000\039\000\039\000\
\039\000\000\000\000\000\039\000\039\000\039\000\039\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\000\000\
\000\000\040\000\040\000\040\000\000\000\000\000\040\000\040\000\
\040\000\040\000\036\000\000\000\036\000\000\000\000\000\000\000\
\000\000\036\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\000\000\000\038\000\
\000\000\000\000\000\000\000\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\000\000\000\000\
\036\000\036\000\036\000\000\000\000\000\036\000\036\000\036\000\
\036\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\000\000\000\000\038\000\038\000\038\000\000\000\000\000\
\038\000\038\000\038\000\038\000\000\000\062\000\000\000\062\000\
\000\000\000\000\000\000\000\000\062\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\063\000\000\000\063\000\000\000\000\000\000\000\000\000\063\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\000\000\000\000\062\000\062\000\062\000\000\000\000\000\
\062\000\062\000\062\000\062\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\000\000\000\000\063\000\063\000\
\063\000\000\000\000\000\063\000\063\000\063\000\063\000\001\000\
\000\000\001\000\000\000\000\000\000\000\001\000\001\000\000\000\
\001\000\001\000\000\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\000\000\001\000\001\000\001\000\001\000\
\001\000\001\000\000\000\000\000\000\000\000\000\001\000\001\000\
\001\000\000\000\037\000\000\000\038\000\000\000\001\000\001\000\
\061\000\062\000\005\000\063\000\042\000\000\000\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\000\000\051\000\
\052\000\053\000\054\000\055\000\056\000\000\000\001\000\000\000\
\081\000\000\000\057\000\058\000\003\000\004\000\005\000\006\000\
\000\000\059\000\060\000\000\000\000\000\000\000\000\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\014\000\000\000\
\000\000\015\000\016\000\017\000\000\000\000\000\018\000\019\000\
\020\000\003\000\004\000\005\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\007\000\008\000\009\000\010\000\011\000\
\012\000\073\000\014\000\000\000\000\000\015\000\016\000\082\000\
\000\000\075\000\018\000\019\000\020\000\000\000\000\000\072\000\
\003\000\004\000\005\000\006\000\000\000\000\000\000\000\000\000\
\007\000\008\000\009\000\010\000\011\000\012\000\073\000\014\000\
\000\000\000\000\015\000\016\000\074\000\000\000\075\000\018\000\
\019\000\020\000\003\000\004\000\005\000\006\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
\008\000\009\000\010\000\011\000\012\000\073\000\014\000\000\000\
\000\000\015\000\016\000\082\000\000\000\075\000\018\000\019\000\
\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\008\000\009\000\010\000\011\000\012\000\013\000\
\014\000\000\000\000\000\015\000\016\000\017\000\000\000\000\000\
\018\000\019\000\020\000"

let yycheck = "\001\000\
\000\000\003\000\004\000\005\000\006\000\007\000\002\001\009\000\
\010\000\002\001\002\001\004\001\004\001\002\001\002\001\004\001\
\004\001\002\001\002\001\004\001\004\001\002\001\002\001\004\001\
\038\000\008\000\028\000\029\000\030\000\038\001\039\001\001\000\
\034\000\035\000\036\000\037\001\058\001\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\002\001\
\058\001\004\001\058\001\061\000\062\000\063\000\064\000\065\000\
\000\000\038\001\039\001\081\000\064\001\043\001\043\001\064\001\
\064\001\064\001\057\000\064\001\064\001\060\000\032\001\064\001\
\064\001\038\001\039\001\064\001\064\001\043\001\043\001\041\001\
\058\001\043\001\000\000\058\001\058\001\002\001\002\001\064\001\
\000\000\004\001\004\001\000\000\043\001\004\001\002\001\004\001\
\064\001\064\001\002\001\114\000\126\000\111\000\112\000\113\000\
\117\000\128\000\255\255\255\255\255\255\255\255\255\255\121\000\
\255\255\255\255\255\255\255\255\255\255\001\001\002\001\003\001\
\004\001\255\255\132\000\007\001\008\001\255\255\010\001\011\001\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\000\000\255\255\255\255\032\001\033\001\034\001\255\255\
\255\255\255\255\255\255\255\255\040\001\041\001\255\255\255\255\
\001\001\002\001\003\001\004\001\000\000\255\255\007\001\008\001\
\255\255\010\001\011\001\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\064\001\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\255\255\255\255\255\255\255\255\
\033\001\034\001\255\255\255\255\001\001\255\255\003\001\040\001\
\041\001\255\255\007\001\008\001\255\255\010\001\011\001\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\064\001\
\255\255\255\255\255\255\000\000\033\001\034\001\255\255\255\255\
\255\255\255\255\255\255\040\001\041\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\001\001\002\001\003\001\004\001\255\255\255\255\007\001\
\008\001\009\001\010\001\011\001\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\255\255\
\032\001\033\001\034\001\255\255\255\255\255\255\255\255\255\255\
\040\001\041\001\255\255\043\001\255\255\255\255\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\255\255\255\255\
\056\001\057\001\058\001\255\255\255\255\061\001\062\001\063\001\
\064\001\001\001\002\001\003\001\004\001\000\000\255\255\007\001\
\008\001\009\001\010\001\011\001\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\002\001\000\000\004\001\255\255\
\255\255\033\001\034\001\009\001\255\255\002\001\255\255\004\001\
\040\001\255\255\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\255\255\255\255\
\056\001\057\001\058\001\255\255\255\255\061\001\062\001\063\001\
\064\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\255\255\255\255\056\001\057\001\058\001\255\255\255\255\061\001\
\062\001\063\001\064\001\002\001\000\000\004\001\255\255\255\255\
\255\255\255\255\009\001\064\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\002\001\000\000\
\004\001\255\255\255\255\255\255\255\255\009\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\255\255\
\255\255\056\001\057\001\058\001\255\255\255\255\061\001\062\001\
\063\001\064\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\255\255\255\255\056\001\057\001\058\001\255\255\
\255\255\061\001\062\001\063\001\064\001\002\001\000\000\004\001\
\255\255\255\255\255\255\255\255\009\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\002\001\000\000\004\001\255\255\255\255\255\255\255\255\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\255\255\255\255\056\001\057\001\058\001\255\255\255\255\
\061\001\062\001\063\001\064\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\255\255\255\255\056\001\057\001\
\058\001\255\255\255\255\061\001\062\001\063\001\064\001\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\004\001\255\255\255\255\255\255\255\255\009\001\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\004\001\255\255\255\255\255\255\255\255\009\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\255\255\056\001\057\001\058\001\
\255\255\255\255\061\001\062\001\063\001\064\001\255\255\255\255\
\255\255\255\255\255\255\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\000\000\255\255\056\001\057\001\058\001\
\255\255\255\255\061\001\062\001\063\001\064\001\002\001\255\255\
\004\001\255\255\255\255\255\255\255\255\009\001\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\002\001\255\255\004\001\255\255\255\255\255\255\255\255\
\009\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\255\255\255\255\056\001\057\001\058\001\255\255\
\255\255\061\001\062\001\063\001\064\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\000\000\255\255\056\001\
\057\001\058\001\255\255\255\255\061\001\062\001\063\001\064\001\
\002\001\255\255\004\001\255\255\255\255\255\255\255\255\009\001\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\002\001\255\255\004\001\255\255\255\255\
\255\255\255\255\009\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\255\255\255\255\056\001\057\001\
\058\001\255\255\255\255\061\001\062\001\063\001\064\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\000\000\
\255\255\056\001\057\001\058\001\255\255\255\255\061\001\062\001\
\063\001\064\001\002\001\255\255\004\001\255\255\255\255\255\255\
\255\255\009\001\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\002\001\255\255\004\001\
\255\255\255\255\255\255\255\255\009\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\255\255\255\255\
\056\001\057\001\058\001\255\255\255\255\061\001\062\001\063\001\
\064\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\000\000\255\255\056\001\057\001\058\001\255\255\255\255\
\061\001\062\001\063\001\064\001\255\255\002\001\255\255\004\001\
\255\255\255\255\255\255\255\255\009\001\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\002\001\255\255\004\001\255\255\255\255\255\255\255\255\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\255\255\255\255\056\001\057\001\058\001\255\255\255\255\
\061\001\062\001\063\001\064\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\000\000\255\255\056\001\057\001\
\058\001\255\255\255\255\061\001\062\001\063\001\064\001\002\001\
\255\255\004\001\255\255\255\255\255\255\255\255\009\001\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\255\255\004\001\255\255\255\255\255\255\
\255\255\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\255\255\056\001\057\001\058\001\
\255\255\255\255\061\001\062\001\063\001\064\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\000\000\255\255\
\056\001\057\001\058\001\255\255\255\255\061\001\062\001\063\001\
\064\001\002\001\255\255\004\001\255\255\255\255\255\255\255\255\
\009\001\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\002\001\255\255\004\001\255\255\
\255\255\255\255\255\255\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\255\255\255\255\056\001\
\057\001\058\001\255\255\255\255\061\001\062\001\063\001\064\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\000\000\255\255\056\001\057\001\058\001\255\255\255\255\061\001\
\062\001\063\001\064\001\002\001\255\255\004\001\255\255\255\255\
\255\255\255\255\009\001\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\004\001\255\255\255\255\255\255\255\255\009\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\255\255\
\255\255\056\001\057\001\058\001\255\255\255\255\061\001\062\001\
\063\001\064\001\255\255\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\000\000\255\255\056\001\057\001\058\001\
\255\255\255\255\061\001\062\001\063\001\064\001\002\001\255\255\
\004\001\255\255\255\255\255\255\255\255\009\001\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\002\001\255\255\004\001\255\255\255\255\255\255\255\255\
\009\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\255\255\255\255\056\001\057\001\058\001\255\255\
\255\255\061\001\062\001\063\001\064\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\255\255\255\255\056\001\
\057\001\058\001\255\255\255\255\061\001\062\001\063\001\064\001\
\002\001\255\255\004\001\255\255\255\255\255\255\255\255\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\002\001\255\255\004\001\255\255\255\255\
\255\255\255\255\009\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\255\255\255\255\056\001\057\001\
\058\001\255\255\255\255\061\001\062\001\063\001\064\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\255\255\
\255\255\056\001\057\001\058\001\255\255\255\255\061\001\062\001\
\063\001\064\001\002\001\255\255\004\001\255\255\255\255\255\255\
\255\255\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\002\001\255\255\004\001\
\255\255\255\255\255\255\255\255\009\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\255\255\255\255\
\056\001\057\001\058\001\255\255\255\255\061\001\062\001\063\001\
\064\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\255\255\255\255\056\001\057\001\058\001\255\255\255\255\
\061\001\062\001\063\001\064\001\255\255\002\001\255\255\004\001\
\255\255\255\255\255\255\255\255\009\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\002\001\255\255\004\001\255\255\255\255\255\255\255\255\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\255\255\255\255\056\001\057\001\058\001\255\255\255\255\
\061\001\062\001\063\001\064\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\255\255\255\255\056\001\057\001\
\058\001\255\255\255\255\061\001\062\001\063\001\064\001\001\001\
\255\255\003\001\255\255\255\255\255\255\007\001\008\001\255\255\
\010\001\011\001\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\032\001\033\001\
\034\001\255\255\001\001\255\255\003\001\255\255\040\001\041\001\
\007\001\008\001\009\001\010\001\011\001\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\064\001\255\255\
\003\001\255\255\033\001\034\001\007\001\008\001\009\001\010\001\
\255\255\040\001\041\001\255\255\255\255\255\255\255\255\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\255\255\
\255\255\056\001\057\001\058\001\255\255\255\255\061\001\062\001\
\063\001\007\001\008\001\009\001\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\255\255\056\001\057\001\058\001\
\255\255\060\001\061\001\062\001\063\001\255\255\255\255\037\001\
\007\001\008\001\009\001\010\001\255\255\255\255\255\255\255\255\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\255\255\255\255\056\001\057\001\058\001\255\255\060\001\061\001\
\062\001\063\001\007\001\008\001\009\001\010\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\255\255\
\255\255\056\001\057\001\058\001\255\255\060\001\061\001\062\001\
\063\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\255\255\255\255\056\001\057\001\058\001\255\255\255\255\
\061\001\062\001\063\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  LBRACE\000\
  RBRACE\000\
  MINUS\000\
  PLUS\000\
  BANG\000\
  TILDE\000\
  HELP\000\
  COLON\000\
  MULT\000\
  DIV\000\
  EXP\000\
  MODULUS\000\
  INTDIV\000\
  MATRIXMULT\000\
  OUTERPROD\000\
  KRONECKERPROD\000\
  MATCH\000\
  LT\000\
  GT\000\
  EQEQ\000\
  NEQ\000\
  GE\000\
  LE\000\
  ANDVEC\000\
  ANDNOVEC\000\
  ORVEC\000\
  ORNOVEC\000\
  LASSIGN\000\
  RASSIGN\000\
  LISTSUBSET\000\
  SEMICOLON\000\
  COLONEQ\000\
  DOT3\000\
  COLON2\000\
  COLON3\000\
  ATTRIBUTE\000\
  LSUPASSIGN\000\
  RSUPASSIGN\000\
  EQASSIGN\000\
  FUNCTION\000\
  RETURN\000\
  IF\000\
  FOR\000\
  WHILE\000\
  REPEAT\000\
  NEXT\000\
  BREAK\000\
  NULL\000\
  NA\000\
  INFINITY\000\
  NAN\000\
  TRUE\000\
  FALSE\000\
  COMMA\000\
  EOF\000\
  "

let yynames_block = "\
  IDENT\000\
  USEROP\000\
  STRING\000\
  INT\000\
  FLOAT\000\
  COMPLEX\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 87 "parser.mly"
                            ( { A.default_ident with name = _1 } )
# 765 "parser.ml"
               : 'ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 88 "parser.mly"
                            ( { A.default_ident
                                  with pkg = _1;
                                       name = _3 } )
# 775 "parser.ml"
               : 'ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 92 "parser.mly"
                            ( { A.default_ident
                                  with pkg = _1; name = _3 } )
# 784 "parser.ml"
               : 'ident))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                            ( A.ArgExpr _1 )
# 791 "parser.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 98 "parser.mly"
                            ( A.IdAssignEmpty _1 )
# 798 "parser.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                            ( A.IdAssign (_1, _3) )
# 806 "parser.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 100 "parser.mly"
                            ( A.StrAssignEmpty _1 )
# 813 "parser.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                            ( A.StrAssign (_1, _3) )
# 821 "parser.ml"
               : 'arg))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "parser.mly"
                            ( A.NullAssignEmpty )
# 827 "parser.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                            ( A.NullAssign _3 )
# 834 "parser.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arg) in
    Obj.repr(
# 107 "parser.mly"
                            ( [_2] )
# 841 "parser.ml"
               : 'argstail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arg) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'argstail) in
    Obj.repr(
# 108 "parser.mly"
                            ( _2 :: _3 )
# 849 "parser.ml"
               : 'argstail))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
                            ( [] )
# 855 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'arg) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'argstail) in
    Obj.repr(
# 113 "parser.mly"
                            ( _1 :: _2 )
# 863 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "parser.mly"
                            ( A.ParamDot )
# 869 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 118 "parser.mly"
                            ( A.Param { A.default_ident
                                          with name = _1 } )
# 877 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                            ( A.DefaultParam ( { A.default_ident
                                                   with name = _1 }
                                             , _3 ) )
# 887 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 125 "parser.mly"
                            ( [_2] )
# 894 "parser.ml"
               : 'paramstail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'paramstail) in
    Obj.repr(
# 126 "parser.mly"
                            ( _2 :: _3 )
# 902 "parser.ml"
               : 'paramstail))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parser.mly"
                            ( [] )
# 908 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paramstail) in
    Obj.repr(
# 130 "parser.mly"
                            ( _1 :: _2 )
# 916 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 136 "parser.mly"
                          ( if contains _1 ':'
                              then (String.sub _1 0 (String.index _1 ':'),
                                    String.sub _1 (String.rindex _1 ':')
                                                  (String.length _1))
                              else (None, _1) )
# 927 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 143 "parser.mly"
                          ( A.ConstInt _1 )
# 934 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 144 "parser.mly"
                          ( A.ConstFloat _1 )
# 941 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 145 "parser.mly"
                          ( A.ConstComplex _1 )
# 948 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 146 "parser.mly"
                          ( A.ConstBool true )
# 954 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 147 "parser.mly"
                          ( A.ConstBool false )
# 960 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 148 "parser.mly"
                          ( A.Null )
# 966 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 149 "parser.mly"
                          ( A.Na )
# 972 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 152 "parser.mly"
                          ( A.Bop (A.Plus, _1, _3) )
# 980 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 153 "parser.mly"
                          ( A.Bop (A.Minus, _1, _3) )
# 988 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 154 "parser.mly"
                          ( A.Bop (A.Mult, _1, _3) )
# 996 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 155 "parser.mly"
                          ( A.Bop (A.Div, _1, _3) )
# 1004 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 156 "parser.mly"
                          ( A.Bop (A.Exp, _1, _3) )
# 1012 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
                          ( A.Bop (A.Gt, _1, _3) )
# 1020 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 158 "parser.mly"
                          ( A.Bop (A.Ge, _1, _3) )
# 1028 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 159 "parser.mly"
                          ( A.Bop (A.Lt, _1, _3) )
# 1036 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 160 "parser.mly"
                          ( A.Bop (A.Le, _1, _3) )
# 1044 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 161 "parser.mly"
                          ( A.Bop (A.Eq, _1, _3) )
# 1052 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 162 "parser.mly"
                          ( A.Bop (A.Neq, _1, _3) )
# 1060 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 163 "parser.mly"
                          ( A.Bop (A.Mod, _1, _3) )
# 1068 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "parser.mly"
                          ( A.Bop (A.IntDiv, _1, _3) )
# 1076 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 165 "parser.mly"
                          ( A.Bop (A.MatrixMult, _1, _3) )
# 1084 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "parser.mly"
                          ( A.Bop (A.OuterProd, _1, _3) )
# 1092 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
                          ( A.Bop (A.KroneckerProd, _1, _3) )
# 1100 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 169 "parser.mly"
                          ( A.Assign (_1, _3) )
# 1108 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 170 "parser.mly"
                          ( A.Assign (_1, _3) )
# 1116 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 171 "parser.mly"
                          ( A.Assign (_3, _1) )
# 1124 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 172 "parser.mly"
                          ( A.SuperAssign (_1, _3) )
# 1132 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ident) in
    Obj.repr(
# 173 "parser.mly"
                          ( A.SuperAssign (_3, _1) )
# 1140 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 174 "parser.mly"
                          ( A.Bop (A.Form, _1, _3) )
# 1148 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "parser.mly"
                          ( A.Bop (A.Help (_1, _3)) )
# 1156 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 176 "parser.mly"
                          ( A.Bop (A.ObjAttr, _1, A.Ident _3) )
# 1164 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args) in
    Obj.repr(
# 181 "parser.mly"
                          ( A.Bop(A. ListSub, _1, _3) )
# 1172 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'args) in
    Obj.repr(
# 183 "parser.mly"
                          ( A.Bop (A.ListProj, _1, _4) )
# 1180 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 184 "parser.mly"
                          ( A.Bop ( A.ListProj
                                  , _1
                                  , [ A.ArgExpr (A.ConstS _3)
                                        , A.IdAssign ( { A.default_ident with
                                                      name = "exact" }
                                                , A.ConstL false ) ]) )
# 1193 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 193 "parser.mly"
                          ( A.Uop (A.Plus _2) )
# 1200 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 194 "parser.mly"
                          ( A.Uop (A.Plus _2) )
# 1207 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 195 "parser.mly"
                          ( A.Uop (A.Plus _2) )
# 1214 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 196 "parser.mly"
                          ( A.Uop (A.Plus _2) )
# 1221 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 199 "parser.mly"
                          ( A.If (_2, _3, A.Null) )
# 1229 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 200 "parser.mly"
                          ( A.If (_2, _3, _4) )
# 1238 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 201 "parser.mly"
                          ( A.For (_2, _3, _4) )
# 1247 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 202 "parser.mly"
                          ( A.While (_2, _3) )
# 1255 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 203 "parser.mly"
                          ( A.Repeat _2 )
# 1262 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 204 "parser.mly"
                          ( A.Next )
# 1268 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 205 "parser.mly"
                          ( A.Break )
# 1274 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args) in
    Obj.repr(
# 209 "parser.mly"
                          ( A.FuncCall (_1, _3) )
# 1282 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'params) in
    Obj.repr(
# 211 "parser.mly"
                          ( A.FuncDec (_1, _3) )
# 1290 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 216 "parser.mly"
      ( [_2] )
# 1297 "parser.ml"
               : 'exprseqtail))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprseqtail) in
    Obj.repr(
# 218 "parser.mly"
      ( _2 :: _3 )
# 1305 "parser.ml"
               : 'exprseqtail))
; (fun __caml_parser_env ->
    Obj.repr(
# 221 "parser.mly"
      ( [] )
# 1311 "parser.ml"
               : 'exprseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exprseqtail) in
    Obj.repr(
# 223 "parser.mly"
      ( _1 :: _2 )
# 1319 "parser.ml"
               : 'exprseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 227 "parser.mly"
         ( _1 )
# 1326 "parser.ml"
               : expr))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : expr)
